version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: miniapp-db
    environment:
      POSTGRES_DB: miniapp
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/migrations/001-create-tables.sql:/docker-entrypoint-initdb.d/001-create-tables.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - miniapp-network

  # Backend API
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: miniapp-backend
    ports:
      - "3001:3001"
    environment:
      DB_HOST: postgres
      DB_NAME: miniapp
      DB_USER: postgres
      DB_PASS: password
      DB_PORT: 5432
      PORT: 3001
      NODE_ENV: production
      CORS_ORIGIN: http://localhost:5173,http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - miniapp-network
    restart: unless-stopped

  # Frontend (for local development only)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: miniapp-frontend
    ports:
      - "5173:5173"
    environment:
      VITE_API_URL: http://localhost:3001/api
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - miniapp-network
    profiles:
      - development

volumes:
  postgres_data:

networks:
  miniapp-network:
    driver: bridge